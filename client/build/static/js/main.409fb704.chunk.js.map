{"version":3,"sources":["assets/images/website-logo.png","services/auth.service.js","services/qr.service.js","components/Login.js","components/Register.js","services/auth-header.js","services/user.service.js","Web3Client.js","services/experience.service.js","components/UserBoard.js","components/Home.js","components/Profile.js","components/ModBoard.js","components/AdminBoard.js","components/NewExperience.js","components/EditProfile.js","components/SingleExperience.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","API_URL","email","password","axios","post","response","data","loginResponse","token","localStorage","setItem","JSON","stringify","user","removeItem","firstName","lastName","address","birthDate","telegramId","walletAddress","userId","birthday","Date","patch","parse","getItem","qrValue","get","then","allowClaim","undefined","required","value","className","role","Login","props","handleLogin","bind","onChangeEmail","onChangePassword","state","loading","message","currentUser","userReady","qrService","getallowClaim","getQRClaimed","AuthService","getCurrentUser","currentToken","getToken","this","setState","e","target","preventDefault","form","validateAll","checkBtn","context","_errors","length","login","history","push","window","location","reload","error","resMessage","toString","onSubmit","ref","c","htmlFor","type","name","onChange","validations","disabled","style","display","Component","withRouter","isEmail","qrCode","vpassword","Register","handleRegister","onChangeFirstName","onChangeLastName","onChangeAddress","onChangeBirthDate","onChangeTelegramId","onChangeWalletAddress","successful","console","log","register","authHeader","Authorization","selectedAccount","SimpleCollectible","headers","pUserId","statusId","date","ipfsUrl","nftGenerated","experienceId","questions","answers","question1","answer1","question2","answer2","question3","answer3","question4","answer4","question5","answer5","token_uri","isInitialized","init","a","provider","ethereum","request","method","accounts","catch","err","on","web3","Web3","eth","net","getId","networkId","Contract","NFTContractBuild","abi","addressCon","mintToken","methods","createCollectible","send","from","client","create","BoardUser","content","experiencesCount","experiences","currentExperiences","minted","ExperienceService","getExperiences","id","UserService","getUserBoard","i","file","files","add","added","url","path","index","listSurveys","map","surveys","experienceSurvey","ipfsUrlJSON","tx","listItems","item","wine","to","scope","Home","checkQR","match","params","qrValid","getPublicContent","Profile","redirect","substring","substr","address_1","roles","key","BoardModerator","getModeratorBoard","BoardAdmin","getAdminBoard","NewExperience","handleChange","event","handleSubmit","addExperience","status","arrQuestions","getQuestions","arrAnswers","saveQuestions","onChangeFile","latitude","longitude","qRCodeClaim","navigator","geolocation","getCurrentPosition","success","coords","accept","src","width","placeholder","Fragment","fontSize","fontWeight","color","lineHeight","marginTop","React","EditProfile","handleUpdate","onChangeBirthday","onChangeTelegram","SingleExperience","App","logOut","redirectTimeout","showModeratorBoard","showAdminBoard","test","pathname","logout","logo","username","href","onClick","exact","component","Boolean","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.409fb704.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/website-logo.3e59f293.png\";","import axios from \"axios\";\n\n// Dev\n// const API_URL = \"http://104.248.49.119:3000\";  \nconst API_URL = \"https://api.openvino.org\";  \n\nclass AuthService {\n  async login(email, password) {\n    const response = await axios\n      .post(API_URL + \"/login\", {\n        \"email\": email,\n        \"password\": password\n      });\n    if (response.data.loginResponse.token) {\n      localStorage.setItem('token', JSON.stringify(response.data.loginResponse.token));\n      localStorage.setItem('user', JSON.stringify(response.data.loginResponse.user));\n    }\n    return response.data;\n  }\n\n  logout() {\n    localStorage.removeItem(\"user\");\n  }\n\n  update(email, password, firstName, lastName, address, birthDate, telegramId, walletAddress, userId) {\n\n    let birthday = new Date(birthDate);\n\n    return axios.patch(API_URL + \"/users\" + userId, {\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"telegramId\": telegramId,\n      \"birthDate\": birthday,\n      \"email\": email,\n      \"address_1\": address,\n      \"address_2\": \"\",\n      \"password\": password,\n      \"walletAddress\": walletAddress,\n      \"roleId\": 1,\n      \"statusId\": 3,\n      \"resetKey\": \"string\"\n    });\n  }\n\n\n  register(email, password, firstName, lastName, address, birthDate, telegramId, walletAddress) {\n\n    let birthday = new Date(birthDate);\n\n    return axios.post(API_URL + \"/signup\", {\n      \"firstName\": firstName,\n      \"lastName\": lastName,\n      \"telegramId\": telegramId,\n      \"birthDate\": birthday,\n      \"email\": email,\n      \"address_1\": address,\n      \"address_2\": \"\",\n      \"password\": password,\n      \"walletAddress\": walletAddress,\n      \"roleId\": 1,\n      \"statusId\": 3\n    });\n  }\n\n  getCurrentUser() {\n    return JSON.parse(localStorage.getItem(\"user\"));\n  }\n\n  getToken() {\n    return JSON.parse(localStorage.getItem('token'));\n  }\n\n}\n\nexport default new AuthService();\n","import axios from \"axios\";\n\n// Dev\n// const API_URL = \"http://104.248.49.119:3000\";  \nconst API_URL = \"https://api.openvino.org\";  \n\n\nclass QrService {\n\n    async checkQR(qrValue) {\n        return axios\n            .get(API_URL + \"/qrstatus/\" + qrValue)\n            .then(response => {\n                localStorage.setItem('allowClaim', JSON.stringify(response.data.allowClaim));\n                if (qrValue != undefined) {\n                localStorage.setItem('qrCodeT', JSON.stringify(qrValue));\n            }\n                return response.data.allowClaim;\n            });\n    }\n\n    getallowClaim() {\n        return JSON.parse(localStorage.getItem('allowClaim'));\n    }\n\n    getQRClaimed() {\n        return JSON.parse(localStorage.getItem('qrCodeT'));\n    }\n\n}\n\nexport default new QrService();\n","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport AuthService from \"../services/auth.service\";\nimport qrService from \"../services/qr.service\";\nimport { withRouter } from \"react-router-dom\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\n\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.handleLogin = this.handleLogin.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.state = {\n      email: \"\",\n      password: \"\",\n      loading: false,\n      message: \"\",\n      currentUser: { email: \"\" },\n      userReady: false\n    };\n  }\n\n  async componentDidMount() {\n    //const qrValid = await qrService.checkQR(this.props.match.params.id);\n    //qrService.checkQR(this.props.match.params.id);\n    //console.log(qrValid);\n    //console.log(qrService.getallowClaim());\n    //console.log(qrService.getQRClaimed());\n    qrService.getallowClaim();\n    qrService.getQRClaimed();\n    //this.setState({ qrValue: qrValid});\n    const currentUser = AuthService.getCurrentUser();\n    const currentToken = AuthService.getToken();\n    if (!currentUser)\n    this.setState({ currentUser: currentUser, userReady: true });\n    this.setState({ currentToken: currentToken, userReady: true });\n    \n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value,\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value,\n    });\n  }\n\n  handleLogin(e) {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      loading: true,\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      AuthService.login(this.state.email, this.state.password).then(\n        () => {\n          this.props.history.push(\"/app/add-experience\");\n          window.location.reload();\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          this.setState({\n            loading: false,\n            message: resMessage,\n          });\n        }\n      );\n    } else {\n      this.setState({\n        loading: false,\n      });\n    }\n  }\n\n  render() {\n   \n    return (\n      <div className=\"col-md-12\">\n        <div className=\"card card-container login-form\">\n          <h1>\n            Welcome,\n            <br />\n            <span className=\"subh1\">Sign in to continue!</span>\n          </h1>\n\n          <Form\n            onSubmit={this.handleLogin}\n            ref={(c) => {\n              this.form = c;\n            }}\n          >\n            <div className=\"form-group\">\n              <label htmlFor=\"email\">Email</label>\n              <Input\n                type=\"text\"\n                className=\"form-control\"\n                name=\"email\"\n                value={this.state.email}\n                onChange={this.onChangeEmail}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <label htmlFor=\"password\">Password</label>\n              <Input\n                type=\"password\"\n                className=\"form-control\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.onChangePassword}\n                validations={[required]}\n              />\n            </div>\n\n            <div className=\"form-group\">\n              <button\n                className=\"btn btn-primary btn-block\"\n                disabled={this.state.loading}\n              >\n                {this.state.loading && (\n                  <span className=\"spinner-border spinner-border-sm\"></span>\n                )}\n                <span>Login</span>\n              </button>\n            </div>\n\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div className=\"alert alert-danger\" role=\"alert\">\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={(c) => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(Login);\n","import React, { Component } from \"react\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\nimport { isEmail } from \"validator\";\nimport qrService from \"../services/qr.service\";\n\nimport AuthService from \"../services/auth.service\";\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\nconst email = (value) => {\n  if (!isEmail(value)) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This is not a valid email.\n      </div>\n    );\n  }\n};\n\nconst vusername = (value) => {\n  if (value.length < 3 || value.length > 20) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The username must be between 3 and 20 characters.\n      </div>\n    );\n  }\n};\n\nconst qrCode = (value) => {\n  if (value == false) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Invalid QR Code.\n      </div>\n    );\n  }\n};\n\nconst vpassword = (value) => {\n  if (value.length < 6 || value.length > 40) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        The password must be between 6 and 40 characters.\n      </div>\n    );\n  }\n};\n\nexport default class Register extends Component {\n  constructor(props) {\n    super(props);\n    this.handleRegister = this.handleRegister.bind(this);\n    this.onChangeEmail = this.onChangeEmail.bind(this);\n    this.onChangePassword = this.onChangePassword.bind(this);\n    this.onChangeFirstName = this.onChangeFirstName.bind(this);\n    this.onChangeLastName = this.onChangeLastName.bind(this);\n    this.onChangeAddress = this.onChangeAddress.bind(this);\n    this.onChangeBirthDate = this.onChangeBirthDate.bind(this);\n    this.onChangeTelegramId = this.onChangeTelegramId.bind(this);\n    this.onChangeWalletAddress = this.onChangeWalletAddress.bind(this);\n\n    /* QR Reading */\n    this.state = {\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      address: \"\",\n      birthDate: \"\",\n      telegramId: \"\",\n      walletAddress: \"\",\n      successful: false,\n      qrValue: \"\",\n      message: \"\",\n    };\n  }\n\n  async componentDidMount() {\n      //const qrValid = await qrService.checkQR(this.props.match.params.id);\n      //console.log(qrValid);\n      console.log(qrService.getallowClaim());\n      console.log(qrService.getQRClaimed());\n      this.setState({ qrValue: qrService.getQRClaimed()});\n      //this.setState({ qrValue: qrValid});\n  }\n\n  onChangeEmail(e) {\n    this.setState({\n      email: e.target.value,\n    });\n  }\n\n  onChangePassword(e) {\n    this.setState({\n      password: e.target.value,\n    });\n  }\n\n  onChangeFirstName(e) {\n    this.setState({\n      firstName: e.target.value,\n    });\n  }\n\n  onChangeLastName(e) {\n    this.setState({\n      lastName: e.target.value,\n    });\n  }\n\n  onChangeAddress(e) {\n    this.setState({\n      address: e.target.value,\n    });\n  }\n\n  onChangeBirthDate(e) {\n    this.setState({\n      birthDate: e.target.value,\n    });\n  }\n\n  onChangeTelegramId(e) {\n    this.setState({\n      telegramId: e.target.value,\n    });\n  }\n\n  onChangeWalletAddress(e) {\n    this.setState({\n      walletAddress: e.target.value,\n    });\n  }\n\n  \n\n  handleRegister(e) {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      successful: false,\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      AuthService.register(\n        this.state.email,\n        this.state.password,\n        this.state.firstName,\n        this.state.lastName,\n        this.state.address,\n        this.state.birthDate,\n        this.state.telegramId,\n        this.state.walletAddress,\n        this.state.qrValue\n      ).then(\n        (response) => {\n          this.props.history.push(\"/app/add-experience\");\n          window.location.reload();\n          this.setState({\n            message: response.data.message,\n            successful: true,\n          });\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          this.setState({\n            successful: false,\n            message: resMessage,\n          });\n        }\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"col-md-12\">\n        <div className=\"card card-container login-form\">\n          <h1>\n            Welcome,\n            <br />\n            <span className=\"subh1\">Register to continue!</span>\n            <br />\n          </h1>\n\n          <Form\n            onSubmit={this.handleRegister}\n            ref={(c) => {\n              this.form = c;\n            }}\n          >\n            {!this.state.successful && (\n              <div>\n              <div className=\"form-group\">\n                  <Input\n                    type=\"hidden\"\n                    className=\"form-control\"\n                    name=\"qrCode\"\n                    value={this.state.qrValue}\n                    validations={[qrCode, required]}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"firstName\"\n                    value={this.state.firstName}\n                    onChange={this.onChangeFirstName}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"lastName\"\n                    value={this.state.lastName}\n                    onChange={this.onChangeLastName}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"address\">Address</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"address\"\n                    value={this.state.address}\n                    onChange={this.onChangeAddress}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"birthDate\">Birthdate</label>\n                  <Input\n                    type=\"date\"\n                    className=\"form-control\"\n                    name=\"birthDate\"\n                    value={this.state.birthDate}\n                    onChange={this.onChangeBirthDate}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"telegramId\">Telegram ID</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"telegramId\"\n                    value={this.state.telegramId}\n                    onChange={this.onChangeTelegramId}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"walletAddress\">Wallet Address</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"walletAddress\"\n                    value={this.state.walletAddress}\n                    onChange={this.onChangeWalletAddress}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"email\">Email</label>\n                  <Input\n                    type=\"text\"\n                    className=\"form-control\"\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.onChangeEmail}\n                    validations={[required, email]}\n                  />\n                </div>\n                <div className=\"form-group\">\n                  <label htmlFor=\"password\">Password</label>\n                  <Input\n                    type=\"password\"\n                    className=\"form-control\"\n                    name=\"password\"\n                    value={this.state.password}\n                    onChange={this.onChangePassword}\n                    validations={[required, vpassword]}\n                  />\n                </div>\n\n                <div className=\"form-group\">\n                  <button className=\"btn btn-primary btn-block\">\n                    Register\n                  </button>\n                </div>\n              </div>\n            )}\n\n            {this.state.message && (\n              <div className=\"form-group\">\n                <div\n                  className={\n                    this.state.successful\n                      ? \"alert alert-success\"\n                      : \"alert alert-danger\"\n                  }\n                  role=\"alert\"\n                >\n                  {this.state.message}\n                </div>\n              </div>\n            )}\n            <CheckButton\n              style={{ display: \"none\" }}\n              ref={(c) => {\n                this.checkBtn = c;\n              }}\n            />\n          </Form>\n        </div>\n      </div>\n    );\n  }\n}\n","export default function authHeader() {\n  const user = JSON.parse(localStorage.getItem('user'));\n  const token = JSON.parse(localStorage.getItem('token'));\n\n  if (user && token) {\n    //console.log(\"token \" + token);\n    return { Authorization: 'Bearer ' + token };\n  } else {\n    return {};\n  }\n}\n\n","import axios from 'axios';\nimport authHeader from './auth-header';\n\n// Dev\n// const API_URL = \"http://104.248.49.119:3000\";  \nconst API_URL = \"https://api.openvino.org\";  \n\nclass UserService {\n  getPublicContent() {\n    return axios.get(API_URL + 'all');\n  }\n\n  getUserBoard() {\n    return axios.get(API_URL + 'user', { headers: authHeader() });\n  }\n\n  getModeratorBoard() {\n    return axios.get(API_URL + 'mod', { headers: authHeader() });\n  }\n\n  getAdminBoard() {\n    return axios.get(API_URL + 'admin', { headers: authHeader() });\n  }\n}\n\nexport default new UserService();\n","import Web3 from 'web3';\n\nimport NFTContractBuild from '../src/contract/SimpleCollectible.json'\n\n// GET Request for this parameter.\n// let token_uri = \"https://ipfs.io/ipfs/QmWxzMCE1EWWJ3vtyRqgD3mTt55jDsCqv3Wc2kbgUWuwv5?filename=1-MTB.json\";\nlet token_uri = localStorage.getItem('ipfsURL');\n\nlet selectedAccount;\n\nlet SimpleCollectible;\n\nlet isInitialized = false;\n\n\nexport const init = async () => {\n\n    let provider = window.ethereum;\n\n    if (typeof provider !== 'undefined') {\n      // Metamask is installed\n\n       provider\n       .request({ method: 'eth_requestAccounts' })\n       .then(accounts => {\n           selectedAccount = accounts[0];\n         console.log('Selected account is ',{selectedAccount});\n       })\n       .catch(err => {\n         console.log(err); \n         return;\n       });\n       // Account is changed Logic\n       window.ethereum.on('accountsChanged', function (accounts) {\n           selectedAccount = accounts[0];\n         console.log('Selected account changed to ',{selectedAccount});\n       });\n    }\n\n    const web3 = new Web3(provider);\n\n    const networkId = await web3.eth.net.getId();\n\n    // Smart contract declare + contract address \n    SimpleCollectible = new web3.eth.Contract(\n        NFTContractBuild.abi, \n        [networkId].addressCon = '0xB8a85332a751D2A6eDc210e4A784018EE168c696'\n    );\n\n    isInitialized = true;\n\n};\n\n        // Function to be called from App.js\nexport const mintToken = async () =>  {\n    if (!isInitialized) {\n        await init();\n    }   // We pass the NFT link (token_uri), going to need to make a request to get that link from API.\n    return SimpleCollectible.methods\n    .createCollectible(token_uri).\n    send({ from: selectedAccount});\n};","import axios from \"axios\";\nimport authHeader from \"./auth-header\";\n\n// Dev\n// const API_URL = \"http://104.248.49.119:3000\";  \nconst API_URL = \"https://api.openvino.org\";  \n\nclass ExperienceService {\n\n  // /users/{id}/experiencesdetail\n  async getExperiences(pUserId) {\n    const response = await axios.get(API_URL + \"/users/\" + pUserId + \"/experiencesdetail\", {\n      headers: authHeader(),\n    }); \n    return response;\n  }\n\n  async addExperience(\n    statusId,\n    date,\n    userId,\n    location,\n    qrValue,\n    ipfsUrl\n  ) {\n    const response = await axios.post(\n      API_URL + \"/experiences\",\n      {\n        date: date,\n        location: location,\n        statusId: statusId,\n        qrValue: qrValue,\n        ipfsUrl: ipfsUrl, //\"https://ipfs.io/ipfs/QmbcKQTe44AYBrfhUypuUapCaQUQAHbWiqGufhR7eoCpwU\"\n        nftGenerated: false,\n        userId: userId,\n      },\n      {\n        headers: authHeader(),\n      }\n    );\n\n    // response ok : { \"status\" : true , \"message\" : \"Nueva experiencia creada: 1\", \"experienceId\" : 1 }\n    // responose error: { \"status\" : false , \"message\" : \"El QRValue no es válido\", \"experienceId\" : 0 }\n    return response;\n  }\n\n  // returns an array only with the active questions\n  async getQuestions() {\n    const response = await axios.get(API_URL + \"/survey-questions\", {\n      headers: authHeader(),\n    });\n\n    return response;\n  }\n\n  // recieves array of questions & answers\n  async saveQuestions(experienceId, questions, answers) {\n    const response = await axios.post(\n      API_URL + \"/experiences/\" + experienceId + \"/experience-survey\",\n      {\n        question1: questions[0],\n        answer1: answers[0],\n        question2: questions[1],\n        answer2: answers[1],\n        question3: questions[2],\n        answer3: answers[2],\n        question4: questions[3],\n        answer4: answers[3],\n        question5: questions[4],\n        answer5: answers[4],\n        experienceId: experienceId,\n      },\n      {\n        headers: authHeader(),\n      }\n    );\n\n    return response;\n  }\n}\n\nexport default new ExperienceService();\n","import React, { Component, useEffect, useState } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport AuthService from \"../services/auth.service\";\nimport UserService from \"../services/user.service\";\nimport ExperienceService from \"../services/experience.service\";\nimport { init, mintToken } from \"../Web3Client\";\nimport { create } from \"ipfs-http-client\";\n\n/* Create an instance of the client */\nconst client = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nexport default class BoardUser extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\",\n      userReady: false,\n      currentUser: { email: \"\" },\n      experiencesCount: \"\",\n      experiences: [],\n      currentExperiences: [],\n      minted: false,\n    };\n  }\n\n  async componentDidMount() {\n    const currentUser = AuthService.getCurrentUser();\n    const currentToken = AuthService.getToken();\n    const currentExperiences = await ExperienceService.getExperiences(\n      currentUser.id\n    );\n\n    this.setState({\n      currentExperiences: currentExperiences,\n    });\n    this.setState({ currentUser: currentUser, userReady: true });\n    this.setState({ currentToken: currentToken, userReady: true });\n    UserService.getUserBoard().then(\n      (response) => {\n        this.setState({\n          content: response.data,\n        });\n      },\n      (error) => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString(),\n        });\n      }\n    );\n\n    await ExperienceService.getExperiences(currentUser.id).then(\n      (response) => {\n        this.setState({\n          experiences: response.data,\n        });\n        for (let i = 0; i < response.data.length; i++) {\n          this.setState({\n            experiencesCount: response.data.length,\n          });\n        }\n      },\n      (error) => {\n        this.setState({\n          experiences:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString(),\n        });\n      }\n    );\n    // console.log(this.state.experiences[3].experienceSurvey);\n    // const listSurveys = this.state.experiences.map((surveys) => (\n    //   JSON.stringify(surveys.experienceSurvey)\n    // ))\n    // console.log(listSurveys);\n  }\n  async onChangeFile(e) {\n    const file = e.target.files[0];\n    try {\n      const added = await client.add(file);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      this.setState({\n        ipfsUrl: url,\n      });\n      console.log(this.state.ipfsUrl);\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  }\n  // Mint Function\n  async createCollectible(index) {\n    try {\n      const listSurveys = this.state.experiences.map(\n        (surveys) => (\n          console.log(JSON.stringify(surveys.experienceSurvey)),\n          // Create JSON file based on experience information\n          JSON.stringify(surveys.experienceSurvey)\n        )\n      );\n      const added = await client.add(listSurveys[index]);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      this.setState({\n        ipfsUrlJSON: url,\n      });\n      console.log(this.state.ipfsUrlJSON);\n      // Added IPFS URL to LocalStorage.\n      localStorage.setItem(\"ipfsURL\", this.state.ipfsUrlJSON);\n      mintToken()\n        .then((tx) => {\n          console.log(tx);\n          this.setState({\n            minted: true,\n          });\n          // Removed IPFS from LocalStorage after success minting\n          localStorage.removeItem(\"ipfsURL\");\n        })\n        .catch((err) => {\n          console.log(err);\n        });\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  }\n\n  render() {\n    // Mint Token Function Called\n    // const createCollectible = () => {\n    //   mintToken()\n    //     .then((tx) => {\n    //       console.log(tx);\n    //       this.setState({\n    //         minted: true,\n    //       });\n    //     })\n    //     .catch((err) => {\n    //       console.log(err);\n    //     });\n    // };\n    const listItems = this.state.experiences.map((item, index) => (\n      <tr>\n        <td>{item.date}</td>\n        <td>{item.statusId}</td>\n        <td>{item.wine.name}</td>\n        <td>{item.wine.qrValue}</td>\n        <td>\n          {/* {!this.state.minted ? (\n            <button\n              tabindex={index}\n              value={index}\n              className=\"btn-primary btn\"\n              // onClick with index of the experience for create JSON file and upload to IPFS\n              onClick={() => this.createCollectible(index)}\n            >\n              {\" \"}\n              Mint Experience NFT\n            </button>\n          ) : (\n            <p>NFT Minted Succesfully!</p>\n          )} */}\n        </td>\n      </tr>\n    ));\n\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <div className=\"row\">\n            <div className=\"col-md\">\n              <h3>Experiences</h3>\n            </div>\n            <div className=\"col-md\">\n              <Link to={\"/app/add-experience\"} className=\"nav-link\">\n                <button className=\"btn btn-secondary new-experience-button\">\n                  New Experience\n                </button>\n              </Link>\n            </div>\n          </div>\n        </header>\n        <div className=\"container profile-card\">\n          <div className=\"table-responsive-sm\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th scope=\"col\">Date</th>\n                  <th scope=\"col\">Status</th>\n                  <th scope=\"col\">Token</th>\n                  <th scope=\"col\">Token ID</th>\n                  <th scope=\"col\">Actions</th>\n                </tr>\n              </thead>\n              <tbody>{listItems}</tbody>\n            </table>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { history } from \"react-dom\";\nimport UserService from \"../services/user.service\";\nimport qrService from \"../services/qr.service\";\nimport Login from \"./Login\";\nimport AuthService from \"../services/auth.service\";\nimport BoardUser from \"./UserBoard\";\n\nexport default class Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      content: \"\",\n      currentUser: { email: \"\" },\n      userReady: false,\n    };\n  }\n\n  async componentDidMount() {\n    //const { history } = this.props;\n    //console.log(window.location.pathname);\n    //const qrpath = window.location.pathname;\n    //const qrpathFormatted = qrpath.replace(/\\\"/g, \"\");\n    //if(window.location.href.indexOf(\"MTB18\") > -1 ) {\n    //this.redirectTimeout = setTimeout(() => {\n    //history.push('/register'+qrpathFormatted)\n    //}, 5000);\n    //}\n    const qrValid = await qrService.checkQR(this.props.match.params.id);\n    const currentUser = AuthService.getCurrentUser();\n    const currentToken = AuthService.getToken();\n    if (!currentUser)\n      this.setState({ currentUser: currentUser, userReady: true });\n    this.setState({ currentToken: currentToken, userReady: true });\n    console.log(qrValid);\n    console.log(qrService.getallowClaim());\n    console.log(qrService.getQRClaimed());\n    UserService.getPublicContent().then(\n      (response) => {\n        this.setState({\n          content: response.data,\n          currentUser: { email: \"\" },\n          userReady: false,\n        });\n      },\n      (error) => {\n        this.setState({\n          content:\n            (error.response && error.response.data) ||\n            error.message ||\n            error.toString(),\n        });\n      }\n    );\n    console.log(this.state.currentUser);\n  }\n\n  render() {\n    return <Login />;\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport AuthService from \"../services/auth.service\";\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nexport default class Profile extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirect: null,\n      userReady: false,\n      currentUser: { email: \"\" },\n    };\n  }\n\n  componentDidMount() {\n    const currentUser = AuthService.getCurrentUser();\n    const currentToken = AuthService.getToken();\n    if (!currentUser) this.setState({ redirect: \"/\" });\n    this.setState({ currentUser: currentUser, userReady: true });\n    this.setState({ currentToken: currentToken, userReady: true });\n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to={this.state.redirect} />;\n    }\n\n    const { currentUser } = this.state;\n    const { currentToken } = this.state;\n    console.log(currentUser);\n    return (\n      <div>\n        <header className=\"jumbotron\">\n          <div className=\"row\">\n            <div className=\"col-md\">\n              <h3>\n                <strong>{currentUser.email}</strong> Profile\n              </h3>\n            </div>\n            <div className=\"col-md\">\n              <Link to={\"/app/edit-profile\"} className=\"nav-link\">\n                <button className=\"btn btn-secondary new-experience-button\">\n                  Edit Profile\n                </button>\n              </Link>\n            </div>\n          </div>\n        </header>\n        {this.state.userReady ? (\n          <div className=\"container profile-card\">\n            <p>\n              <strong>Token:</strong> {currentToken.substring(0, 20)}{\" \"}\n              ...{\" \"}\n              {currentToken.substr(\n                currentToken.length - 20\n              )}\n            </p>\n            <p>\n              <strong>Id:</strong> {currentUser.id}\n            </p>\n            <p>\n              <strong>Email:</strong> {currentUser.email}\n            </p>\n            <p>\n              <strong>First Name:</strong> {currentUser.firstName}\n            </p>\n            <p>\n              <strong>Last Name:</strong> {currentUser.lastName}\n            </p>\n            <p>\n              <strong>Address:</strong> {currentUser.address_1}\n            </p>\n            <p>\n              <strong>Birthdate:</strong> {currentUser.birthDate}\n            </p>\n            <p>\n              <strong>Telegram ID:</strong> {currentUser.telegramId}\n            </p>\n            <p>\n              <strong>Wallet Address:</strong> {currentUser.walletAddress}\n            </p>\n            <strong>Authorities:</strong>\n            <ul>\n              {currentUser.roles &&\n                currentUser.roles.map((role, index) => (\n                  <li key={index}>{role}</li>\n                ))}\n            </ul>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardModerator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\"\n    };\n  }\n\n  componentDidMount() {\n    UserService.getModeratorBoard().then(\n      response => {\n        this.setState({\n          content: response.data\n        });\n      },\n      error => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString()\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>{this.state.content}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nimport UserService from \"../services/user.service\";\n\nexport default class BoardAdmin extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      content: \"\"\n    };\n  }\n\n  componentDidMount() {\n    UserService.getAdminBoard().then(\n      response => {\n        this.setState({\n          content: response.data\n        });\n      },\n      error => {\n        this.setState({\n          content:\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString()\n        });\n      }\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <header className=\"jumbotron\">\n          <h3>{this.state.content}</h3>\n        </header>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ExperienceService from \"../services/experience.service\";\nimport AuthService from \"../services/auth.service\";\nimport qrService from \"../services/qr.service\";\nimport { withRouter } from \"react-router-dom\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport { create } from \"ipfs-http-client\";\n\n/* Create an instance of the client */\nconst client = create(\"https://ipfs.infura.io:5001/api/v0\");\n\nconst required = (value) => {\n  if (!value) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        This field is required!\n      </div>\n    );\n  }\n};\n\nconst qrCode = (value) => {\n  if (value == false) {\n    return (\n      <div className=\"alert alert-danger\" role=\"alert\">\n        Invalid QR Code.\n      </div>\n    );\n  }\n};\n\nclass NewExperience extends React.Component {\n  constructor(props) {\n    super(props);\n    this.onChangeFile = this.onChangeFile.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      ipfsUrl: \"\",\n      qrValue: \"\",\n      statusId: 5,\n      location: \"\",\n      userId: \"\",\n      date: \"\",\n      latitude: null,\n      longitude: null,\n      experienceId: \"\",\n      qRCodeClaim: \"\",\n      nftGenerated: false,\n    };\n  }\n\n  componentDidMount() {\n    //const questions = ExperienceService.getQuestions(1);\n    const currentUser = AuthService.getCurrentUser();\n    const currentToken = AuthService.getToken();\n    const qrCode = qrService.getQRClaimed();\n    const qRCodeClaim = qrService.getallowClaim();\n    if (!currentUser) this.setState({ redirect: \"/\" });\n    this.setState({ currentUser: currentUser, userReady: true });\n    this.setState({ currentToken: currentToken, userReady: true });\n    this.setState({ qrValue: qrCode });\n    this.setState({ qRCodeClaim: qRCodeClaim });\n    this.setState({ userId: currentUser.id });\n    this.setState({ date: new Date() });\n    this.setState({ location: \"Mendoza\" });\n    //console.log(currentToken);\n    //console.log(currentUser);\n    //console.log(currentUser.id);\n    //console.log(qrCode);\n    //console.log(questions);\n    window.navigator.geolocation.getCurrentPosition((success) =>\n      this.setState({\n        latitude: success.coords.latitude,\n        longitude: success.coords.longitude,\n      })\n    );\n  }\n\n  async onChangeFile(e) {\n    const file = e.target.files[0];\n    try {\n      const added = await client.add(file);\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      this.setState({\n        ipfsUrl: url,\n      });\n      console.log(this.state.ipfsUrl);\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  }\n\n  handleChange = (event) => {\n    const { name, value } = event.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      successful: false,\n    });\n\n    //this.form.validateAll();\n\n    // grabación de la experiencia y de las respuesta\n    // la busqueda de las preguntas no debería ir acá\n\n    ExperienceService.addExperience(\n      this.state.statusId,\n      this.state.date,\n      this.state.userId,\n      this.state.location,\n      this.state.qrValue,\n      this.state.ipfsUrl,\n      this.state.nftGenerated\n    ).then(\n      (response) => {\n        // *** comento para que no me refresque pa pàgina y pueda ver la consola ***\n        this.props.history.push(\"/app/user\");\n        window.location.reload();\n        console.log(response);\n        //valido el status de la respuesta para saber si la experiencia se grabó correctamente\n        if (response.data.status) {\n          // la experiencia se grabó exitosamente\n          this.setState({\n            message: response.data.message,\n            experienceId: response.data.experienceId,\n            nftGenerated: true,\n            successful: true,\n          });\n          // grabar respuestas\n          // *** prueba obtener pregutas, esto no debería estar acà, las preguntas\n          // debería buscarlas antes para mostrarlas en la interface ***\n          // la grabación esta dentro de la búsqueda solo para que se realicen en ese orden sincrónico\n          let arrQuestions = [];\n          ExperienceService.getQuestions().then(\n            (response) => {\n              // transformo el json a un array\n              arrQuestions.push(response.data[0].question1);\n              arrQuestions.push(response.data[0].question2);\n              arrQuestions.push(response.data[0].question3);\n              arrQuestions.push(response.data[0].question4);\n              arrQuestions.push(response.data[0].question5);\n\n              // *** prueba grabar preguntas ***\n              // armo un array con las respuetas y paso ambos array para grabar\n              const arrAnswers = [\n                this.state.answer1,\n                this.state.answer2,\n                this.state.answer3,\n                this.state.answer4,\n                this.state.answer5,\n              ];\n              ExperienceService.saveQuestions(\n                this.state.experienceId,\n                arrQuestions,\n                arrAnswers\n              );\n              // let state = {\n              //   name: \"MTB18\",\n              //   description: [\n              //     \"Are you sharing this bottle with other people? How many? \" + `${this.state.answer1}`,\n              //     \"Did you buy this bottle with crypto? or in a shop or restaurant? was it a gift? \" + `${this.state.answer2}`,\n              //     \"Are you drinking this wine with food? What are you eating? \" + `${this.state.answer3}`,\n              //     \"Do you like this wine? How would you rank it? \" + `${this.state.answer4}`,\n              //     \"Do you think we should build a colony on Mars? \" + `${this.state.answer5}`,\n              //   ],\n              //   image:\n              //     \"https://ipfs.io/ipfs/QmPbZo9n82xw8owUqT1hLSjvn3oYDpkLpt9yRMSpivtgZS\",\n              //   attributes: [\n              //     {\n              //       trait_type: \"Rating\",\n              //       value: 80,\n              //     },\n              //   ],\n              // };\n              // console.log(state);\n              // console.log(JSON.stringify(state))\n              ;},\n            (error) => {\n              console.log(error.toString());\n            }\n          );\n        } else {\n          // *** la experiencia no se grabó, no avanzar en la ejecución  ***\n          this.setState({\n            message: response.data.message,\n            experienceId: 0,\n            successful: false,\n          });\n        }\n      },\n      (error) => {\n        const resMessage =\n          (error.response &&\n            error.response.data &&\n            error.response.data.message) ||\n          error.message ||\n          error.toString();\n\n        this.setState({\n          successful: false,\n          message: resMessage,\n        });\n      }\n    );\n  };\n\n  render() {\n    \n    if (this.state.qRCodeClaim == true) {\n      return (\n        <form onSubmit={this.handleSubmit}>\n          <div className=\"col-md-12\">\n            <div className=\"card card-container login-form\">\n              <h1>Add New Experience</h1>\n              <div className=\"form-group\">\n                <label className=\"cameraButton\">\n                  <i className=\"fas fa-camera-retro\"></i> Take a picture\n                  <input\n                    type=\"file\"\n                    onChange={this.onChangeFile}\n                    accept=\"image/*;capture=camera\"\n                  />\n                </label>\n                {this.state.ipfsUrl && (\n                  <img src={this.state.ipfsUrl} width=\"370px\" />\n                )}\n              </div>\n              <div className=\"form-group\">\n                <label htmlFor=\"username\">\n                  Are you sharing this bottle with other people? How many?\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"answer1\"\n                  name=\"answer1\"\n                  type=\"textarea\"\n                  placeholder=\"Enter your answer\"\n                  value={this.state.answer1}\n                  onChange={this.handleChange}\n                />\n                <label htmlFor=\"username\">\n                  Did you buy this bottle with crypto? or in a shop or\n                  restaurant? was it a gift?\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"answer2\"\n                  name=\"answer2\"\n                  type=\"textarea\"\n                  placeholder=\"Enter your answer\"\n                  value={this.state.answer2}\n                  onChange={this.handleChange}\n                />\n                <label htmlFor=\"username\">\n                  Are you drinking this wine with food? What are you eating?\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"answer3\"\n                  name=\"answer3\"\n                  type=\"textarea\"\n                  placeholder=\"Enter your answer\"\n                  value={this.state.answer3}\n                  onChange={this.handleChange}\n                />\n                <label htmlFor=\"username\">\n                  Do you like this wine? How would you rank it?\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"answer4\"\n                  name=\"answer4\"\n                  type=\"textarea\"\n                  placeholder=\"Enter your answer\"\n                  value={this.state.answer4}\n                  onChange={this.handleChange}\n                />\n                <label htmlFor=\"username\">\n                  Do you think we should build a colony on Mars?\n                </label>\n                <textarea\n                  className=\"form-control\"\n                  id=\"answer5\"\n                  name=\"answer5\"\n                  type=\"textarea\"\n                  placeholder=\"Enter your answer\"\n                  value={this.state.answer5}\n                  onChange={this.handleChange}\n                />\n              </div>\n              <button className=\"btn btn-primary float-right\">\n                Register Experience\n              </button>\n            </div>\n          </div>\n        </form>\n      );\n    } else {\n      return (\n        <React.Fragment>\n          <div className=\"col-md-12\">\n            <div className=\"card card-container login-form\">\n              <h1\n                style={{\n                  fontSize: \"35px\",\n                  fontWeight: \"bold\",\n                  color: \"#B0195C\",\n                  lineHeight: \"33px\",\n                }}\n              >\n                SCAN YOUR QR CODE\n              </h1>\n              <p\n                style={{\n                  marginTop: \"20px\",\n                }}\n              >\n                First, you have to scan the QR Code that is in the reverse of\n                your wine bottle.\n              </p>\n            </div>\n          </div>\n        </React.Fragment>\n      );\n    }\n  }\n}\nexport default withRouter(NewExperience);\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport AuthService from \"../services/auth.service\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport Form from \"react-validation/build/form\";\nimport Input from \"react-validation/build/input\";\nimport CheckButton from \"react-validation/build/button\";\n\nexport default class EditProfile extends Component {\n  constructor(props) {\n    super(props);\n    this.onChangeFirstName = this.onChangeFirstName.bind(this);\n    this.onChangeLastName = this.onChangeLastName.bind(this);\n    this.onChangeAddress = this.onChangeAddress.bind(this);\n    this.onChangeBirthday = this.onChangeBirthday.bind(this);\n    this.onChangeTelegram = this.onChangeTelegram.bind(this);\n    this.onChangeWalletAddress = this.onChangeWalletAddress.bind(this);\n\n    this.state = {\n      redirect: null,\n      userReady: false,\n      currentUser: { email: \"\" },\n    };\n  }\n\n  componentDidMount() {\n    const currentUser = AuthService.getCurrentUser();\n    const currentToken = AuthService.getToken();\n    if (!currentUser) this.setState({ redirect: \"/\" });\n    this.setState({ currentUser: currentUser, userReady: true });\n  }\n\n  onChangeFirstName(e) {\n    this.setState({\n      firstName: e.target.value,\n    });\n  }\n\n  onChangeLastName(e) {\n    this.setState({\n      lastName: e.target.value,\n    });\n  }\n\n  onChangeAddress(e) {\n    this.setState({\n      address: e.target.value,\n    });\n  }\n\n  onChangeBirthday(e) {\n    this.setState({\n      birthDate: e.target.value,\n    });\n  }\n\n  onChangeTelegram(e) {\n    this.setState({\n      telegramId: e.target.value,\n    });\n  }\n\n  onChangeWalletAddress(e) {\n    this.setState({\n      walletAddress: e.target.value,\n    });\n  }\n\n  handleUpdate = (e) => {\n    e.preventDefault();\n\n    this.setState({\n      message: \"\",\n      successful: false,\n    });\n\n    this.form.validateAll();\n\n    if (this.checkBtn.context._errors.length === 0) {\n      AuthService.register(\n        this.state.email,\n        this.state.password,\n        this.state.firstName,\n        this.state.lastName,\n        this.state.address,\n        this.state.birthDate,\n        this.state.telegramId,\n        this.state.walletAddress,\n        this.state.qrValue\n      ).then(\n        (response) => {\n          this.props.history.push(\"/login\");\n          window.location.reload();\n          this.setState({\n            message: response.data.message,\n            successful: true,\n          });\n        },\n        (error) => {\n          const resMessage =\n            (error.response &&\n              error.response.data &&\n              error.response.data.message) ||\n            error.message ||\n            error.toString();\n\n          this.setState({\n            successful: false,\n            message: resMessage,\n          });\n        }\n      );\n    }\n  };\n\n\n  render() {\n    const { currentUser } = this.state;\n    const { currentToken } = this.state;\n    console.log(currentUser);\n\n    if (this.state.redirect) {\n      return <Redirect to={this.state.redirect} />;\n    }\n    return (\n      <div>\n        <header className=\"jumbotron\">\n          <div className=\"row\">\n            <div className=\"col-md\">\n              <h3>\n                <strong>{currentUser.email}</strong> Edit Profile\n              </h3>\n            </div>\n            <div className=\"col-md\">\n              <Link to={\"/profile\"} className=\"nav-link\">\n                <button className=\"btn btn-secondary new-experience-button\">\n                  Back to Profile\n                </button>\n              </Link>\n            </div>\n          </div>\n        </header>\n        {this.state.userReady ? (\n          <div className=\"container profile-card\">\n            <Form\n              onSubmit={this.handleUpdate}\n              ref={(c) => {\n                this.form = c;\n              }}\n            >\n              {!this.state.successful && (\n                <div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"firstName\">First Name</label>\n                    <Input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"firstName\"\n                      value={this.state.firstName}\n                      placeholder={currentUser.firstName}\n                      onChange={this.onChangeFirstName}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"lastName\">Last Name</label>\n                    <Input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"lastName\"\n                      value={this.state.lastName}\n                      placeholder={currentUser.lastName}\n                      onChange={this.onChangeLastName}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"address\">Address</label>\n                    <Input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"address\"\n                      value={this.state.address}\n                      placeholder={currentUser.address_1}\n                      onChange={this.onChangeAddress}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"birthDate\">Birthdate</label>\n                    <Input\n                      type=\"date\"\n                      className=\"form-control\"\n                      name=\"birthDate\"\n                      value={this.state.birthDate}\n                      placeholder={currentUser.birthDate}\n                      onChange={this.onChangeBirthday}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"telegramId\">Telegram ID</label>\n                    <Input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"telegramId\"\n                      value={this.state.telegramId}\n                      placeholder={currentUser.telegramId}\n                      onChange={this.onChangeTelegram}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"walletAddress\">Wallet Address</label>\n                    <Input\n                      type=\"text\"\n                      className=\"form-control\"\n                      name=\"walletAddress\"\n                      value={this.state.walletAddress}\n                      placeholder={currentUser.walletAddress}\n                      onChange={this.onChangeWalletAddress}\n                    />\n                  </div>\n                  <div className=\"form-group\">\n                    <button className=\"btn btn-primary btn-block\">\n                      Update\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              {this.state.message && (\n                <div className=\"form-group\">\n                  <div\n                    className={\n                      this.state.successful\n                        ? \"alert alert-success\"\n                        : \"alert alert-danger\"\n                    }\n                    role=\"alert\"\n                  >\n                    {this.state.message}\n                  </div>\n                </div>\n              )}\n              <CheckButton\n                style={{ display: \"none\" }}\n                ref={(c) => {\n                  this.checkBtn = c;\n                }}\n              />\n            </Form>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Redirect } from \"react-router-dom\";\nimport { Switch, Route, Link } from \"react-router-dom\";\n\nexport default class SingleExperience extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      redirect: null,\n      userReady: false,\n      currentUser: { email: \"\" }    \n    };\n  }\n\n  async componentDidMount() {\n    \n   \n  }\n\n  render() {\n    if (this.state.redirect) {\n      return <Redirect to={this.state.redirect} />;\n    }\n\n    const { currentUser } = this.state;\n    console.log(currentUser);\n    return (\n      <div>\n        <header className=\"jumbotron\">\n          <div className=\"row\">\n            <div className=\"col-md\">\n              <h3>Experience ID {currentUser.id}</h3>\n            </div>\n            <div className=\"col-md\">\n              <Link to={\"/app/user\"} className=\"nav-link\">\n                <button className=\"btn btn-secondary new-experience-button\">\n                  Back to Experiences\n                </button>\n              </Link>\n            </div>\n          </div>\n        </header>\n        {this.state.userReady ? (\n          <div className=\"container profile-card\">\n            <p>\n              <strong>QR Code:</strong>{\" \"}\n              {currentUser.token.substring(0, 20)} ...{\" \"}\n              {currentUser.token.substr(\n                currentUser.token.length - 20\n              )}\n            </p>\n            <p>\n              <strong>Date:</strong> 24/02/2020\n            </p>\n            <p>\n              <strong>Tokens:</strong> 1\n            </p>\n            <p>\n              <strong>Status:</strong> Pending\n            </p>\n          </div>\n        ) : null}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\nimport logo from \"./assets/images/website-logo.png\";\nimport { withRouter } from \"react-router-dom\";\nimport AuthService from \"./services/auth.service\";\nimport Login from \"./components/Login\";\nimport Register from \"./components/Register\";\nimport Home from \"./components/Home\";\nimport Profile from \"./components/Profile\";\nimport BoardUser from \"./components/UserBoard\";\nimport BoardModerator from \"./components/ModBoard\";\nimport BoardAdmin from \"./components/AdminBoard\";\nimport NewExperience from \"./components/NewExperience\";\nimport EditProfile from \"./components/EditProfile\";\nimport SingleExperience from \"./components/SingleExperience\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.logOut = this.logOut.bind(this);\n    this.redirectTimeout = null;\n    this.state = {\n      showModeratorBoard: false,\n      showAdminBoard: false,\n      currentUser: undefined,\n      test:'',\n    };\n  }\n\n\n  componentDidMount() {\n    const test = window.location.pathname;\n    const user = AuthService.getCurrentUser();\n    if (user) {\n      this.setState({\n        currentUser: user,\n        test: test\n        //showModeratorBoard: user.roles.includes(\"ROLE_MODERATOR\"),\n        //showAdminBoard: user.roles.includes(\"ROLE_ADMIN\"),\n      });\n    }\n  }\n\n  logOut() {\n    AuthService.logout();\n  }\n\n  render() {\n    const { currentUser, showModeratorBoard, showAdminBoard, test } = this.state;\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand\">\n          <Link to={\"/\"} className=\"navbar-brand\">\n            <img className=\"logo-header\" src={logo} />\n          </Link>\n          <div className=\"navbar-nav mr-auto\">\n            {/* <li className=\"nav-item\">\n              <Link to={\"/home\"} className=\"nav-link\">\n                Home\n              </Link>\n            </li> */}\n\n            {showModeratorBoard && (\n              <li className=\"nav-item\">\n                <Link to={\"/app/mod\"} className=\"nav-link\">\n                  Winery Board\n                </Link>\n              </li>\n            )}\n\n            {showAdminBoard && (\n              <li className=\"nav-item\">\n                <Link to={\"/app/admin\"} className=\"nav-link\">\n                  Admin Board\n                </Link>\n              </li>\n            )}\n\n            {currentUser && (\n              <li className=\"nav-item\">\n                <Link to={\"/app/user\"} className=\"nav-link\">\n                  Experiences\n                </Link>\n              </li>\n            )}\n          </div>\n\n          {currentUser ? (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/app/profile\"} className=\"nav-link\">\n                  <i className=\"far fa-user-circle\"></i> {currentUser.username}\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <a href=\"/app/login\" className=\"nav-link\" onClick={this.logOut}>\n                  <i className=\"fas fa-power-off\"></i>\n                </a>\n              </li>\n            </div>\n          ) : (\n            <div className=\"navbar-nav ml-auto\">\n              <li className=\"nav-item\">\n                <Link to={\"/app/login\"} className=\"nav-link\">\n                  <button className=\"btn btn-primary btn-block\">Login</button>\n                </Link>\n              </li>\n\n              <li className=\"nav-item\">\n                <Link to={\"/app/register\"} className=\"nav-link\">\n                  <button className=\"btn btn-secondary btn-block\">\n                    Register\n                  </button>\n                </Link>\n              </li>\n            </div>\n          )}\n        </nav>\n        <div className=\"container mt-3\">\n          <Switch>\n            <Route exact path={\"/\"} component={Home} />\n            <Route exact path={\"/:id\"} component={Home} />\n            <Route exact path=\"/app/login\" component={Login} />\n            <Route exact path=\"/app/login/:id\" component={Login} />\n            <Route exact path=\"/app/register/:id\" component={Register} />\n            <Route exact path=\"/app/register\" component={Register} />\n            <Route exact path=\"/app/profile\" component={Profile} />\n            <Route path=\"/app/user\" component={BoardUser} />\n            <Route path=\"/app/mod\" component={BoardModerator} />\n            <Route path=\"/app/admin\" component={BoardAdmin} />\n            <Route path=\"/app/add-experience\" component={NewExperience} />\n            <Route path=\"/app/edit-profile\" component={EditProfile} />\n            <Route path=\"/app/single-experience\" component={SingleExperience} />\n            </Switch>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useLocation } from \"react-router\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}